"""
Client for managing MCP servers and sessions through MCP Router.

This module provides a high-level client that manages MCP servers and sessions
through MCP Router. It extends the base MCPClient with additional functionality
specific to MCP Router use cases.
"""

from typing import Any, Dict, List, Optional, Union

from .client import MCPClient
from .session import MCPSession


class MCPRouterClient(MCPClient):
    """Client for managing MCP servers and sessions through MCP Router.

    This class extends MCPClient to provide a more convenient interface for
    working with MCP Router. It enables auto-registration by default, making it
    easier to use MCP servers without manual configuration.
    
    Example:
        ```python
        # Configuration with MCP Router and server details
        config = {
            "mcpRouter": {
                "router_url": "http://localhost:3282",
            },
            "mcpServers": {
                "puppeteer": {
                    "command": "npx",
                    "args": ["-y", "@modelcontextprotocol/server-puppeteer"],
                    "env": {
                        "PUPPETEER_LAUNCH_OPTIONS": "{ \"headless\": false }"
                    }
                }
            }
        }
        
        # Create client and session
        client = MCPRouterClient(config)
        session = await client.create_session("puppeteer")  # auto_register is True by default
        
        # Call tools through the session
        result = await session.call_tool("browser.navigate", {"url": "https://example.com"})
        ```
    """

    def __init__(
        self,
        config: Union[str, Dict[str, Any], None] = None,
    ) -> None:
        """Initialize a new MCP Router client.

        Args:
            config: Either a dict containing configuration or a path to a JSON config file.
                   If None, an empty configuration is used.
        """
        super().__init__(config)

    async def create_session(
        self, 
        server_name: str, 
        auto_initialize: bool = True,
        auto_register: bool = True
    ) -> MCPSession:
        """Create a session for the specified server through MCP Router.

        This method overrides the base class method to ensure auto_register is True
        by default for MCPRouterClient, making it more convenient for automatic
        server registration and management.

        Args:
            server_name: The name of the server to create a session for.
            auto_initialize: Whether to automatically initialize the session.
            auto_register: Whether to automatically register and start the server
                           if it doesn't exist in the MCP Router. Defaults to True.

        Returns:
            The created MCPSession.
        """
        # Call the parent class method with auto_register=True
        return await super().create_session(server_name, auto_initialize, auto_register)
